
This sample chapter introduces the concepts of objects, methods, and properties, and shows how to use the objects provided with Windows Script Host with different scripting languages.
This chapter is from the book 
This chapter is from the book
Windows XP Under the Hood: Hardcore Windows Scripting and Command Line PowerWindows XP Under the Hood: Hardcore Windows Scripting and Command Line Power

Learn More Buy
This chapter is from the book
Windows XP Under the Hood: Hardcore Windows Scripting and Command Line PowerWindows XP Under the Hood: Hardcore Windows Scripting and Command Line Power

Learn More Buy
Road Map

    This chapter introduces the concepts of objects, methods, and properties. It provides the background you'll need for the following seven chapters.

    Read this chapter to see how to use the objects provided with Windows Script Host with different scripting languages.

    To get the most out of this chapter, you should be familiar with at least one script programming language.

    The last section of the chapter shows how you can learn about the many undocumented objects provided with Windows.

Introduction to Objects

All the Windows Scripting languages that I discussed in Chapter 1, "Introduction to Windows Script Host," provide the basic tools to control a script's execution and to manipulate strings, numbers, dates, and so on, but they don't necessarily provide a way of interacting with Windows, files, or application software. These functions are provided by objects—add-on components that extend a language's intrinsic capabilities. In this section, I'll discuss what objects are and will introduce the terms you'll run into as you work with them. In the following sections, I'll discuss how objects are actually used in several different programming languages.

In the most general sense, objects are little program packages that manipulate and communicate information. They're a software representation of something tangible, such as a file, a folder, a network connection, an e-mail message, or an Excel document. Objects have properties and methods. Properties are data values that describe the attributes of the thing the object represents. Methods are actions—program subroutines—you can use to alter or manipulate whatever the object represents.

For example, a file on your hard disk has a size, a creation date, and a name. So, these are some of the properties you would expect a File object to have. You can rename, delete, read, and write a file, so a File object should provide methods to perform these tasks. An important aspect of objects is that they are self-contained and separate from the program that uses them. How the object stores and manipulates its data internally is its own business. The object's author chooses what data and procedures to make accessible to the outside world. In programming jargon, we say that an object exposes properties and methods; these items compose its interface. Figure 
  3.1 shows the interface of a hypothetical File object.

Figure 3.1Figure 
3.1 This hypothetical File object has an interface that can be used by other programs. How the File object actually stores its information and does its job are hidden.

Objects need a mechanism through which they can exchange property and method information with a program or a script. Because each programming language has a unique way of storing and transferring data, objects and programs must use some agreed-upon, common way of exchanging data. Microsoft uses what it calls the Common Object Model (COM). COM objects can be used by any compatible language, including VBScript, JScript, C, C++, C#, Visual Basic, Perl, Object REXX, and so on. COM objects may also be called ActiveX Objects, Automation Objects or OLE objects, but regardless what they're called, the technology is based on COM.

NOTE

There are object models other than COM, which operating systems other than Windows use, but in this book I'll discuss only COM.

In the next several chapters, we'll see objects that represent files, folders, network connections, user accounts, printers, Registry entries, Windows applications, e-mail messages, and many more aspects of your computer and network. Windows XP comes with software to provide you with a wealth of different objects. You can also download, buy, or create additional objects of your own devising.
Classes and Instances

Two other terms you're likely to run into while working with objects are class and instance. The distinction is the same as that between a blueprint for a house and the house itself.

The word class refers to the object's definition: Its interface (the properties and methods it provides) and its implementation (the hidden programming inside that does the actual work). Many object classes are provided with Windows, and you can add or create more, as discussed in Chapter 9, "Creating Your Own Scriptable Objects."

When you actually use an object in a program, the class program creates an instance of the object; this is a parcel of computer memory set aside to hold the object's data. The class program then gives your program a reference to use when manipulating the object—some identifying value that the class program can use to determine which particular instance of the object your script or program is using. Figure 
  3.2 illustrates this point: Variables obj1 and obj2 are variables that reference instances of a File object.

Figure 3.2Figure 
3.2 obj1 and obj2 refer to objects of the File class. This illustration shows two instances of the File object.

A reference is treated like any other variable in your program. Just as you can use functions such as sqrt() and left() to manipulate numeric and string values, you can use the object's methods and properties to manipulate an object reference.
Containers and Collections

As mentioned earlier, an object represents some real-world, tangible thing, such as a document or a hard drive, and it has properties that represent the tangible thing's attributes. For example, an apple object might have attributes such as color and tartness. The actual data stored for the color might be a character string such as "red" or "green". Tartness might be represented as number from 0 (sugary sweet) to 10 (brings tears to your eyes).

An object describing a file on a hard drive might have properties such as filename (a character string) and size (a number). An object representing a hard drive might have properties describing the hard drive's size, volume name, and also the drive's contents.

Now, the contents of a hard drive could be represented as a list of filenames or an array of string values. However, it might be more useful if the hard drive could yield a list of file objects that you could then use to work with the files themselves. This is actually how many objects work. When appropriate, objects can return references to other objects. When an object needs to give you several other objects, it will give you a special object called a collection, which holds within it an arbitrary number of other objects. For example, a Folder object might represent a folder on your hard drive, and its Files property might yield a collection of File objects, which represent the files in the folder, as illustrated in Figure 3.3.

Figure 3.3Figure 
  3.3 File and Folder objects can represent the contents of a hard drive. The contents of a folder can be represented by collections of File and Folder objects.

A collection object can actually hold any type of object inside it, and the collection object itself has properties and methods that let you extract and work with these objects. This is a common thing to see in object programming: "container" objects that contain other objects, of any arbitrary type. You'll see many examples of collections in later chapters.

Windows ActiveX objects use container objects that have two properties: Item and Length. The Length property indicates how many items are in the collection. The Item property retrieves one of the individual items. For some collections, you can extract individual objects from the Item collection using Item(0), Item(1), and so on, but for many collections, the Item property requires a name or other arcane bit of identifying information. Therefore, each scripting language provides a more general way of letting you examine all the objects in a collection. I'll discuss this in more detail later in the chapter.

Collections are pervasive in Windows script programming, and some languages have special means of working with them. I'll give examples of using collections in each of the scripting languages discussed later in the chapter.
Object Naming

Because objects are separate program components, scripts and other programs that use them need a way to locate them and tell Windows to activate them. In this section, I'll describe how this is done.

Each programmer who creates an object class gives it a name that, with any luck, is fairly self-explanatory. For example, Scripting.FileSystemObject is designed to be used by Windows Script Host (WSH) programs to view and manage hard drives, files, and folders. Each of the programming languages you can use with WSH has a way of creating an object instance given just this name. For example, in VBScript, the statement

set fsobj = CreateObject("Scripting.FileSystemObject")

does the job, whereas in Object REXX, the comparable statement is

fsobj = .OLEObject~New("Scripting.FileSystemObject")

In either case, the statement causes the Windows Script Host interpreter to ask Windows to create an instance of the specified object. Windows looks up the object name in the Registry, finds the name of the program file that manages this object class (usually a file whose name ends in .dll or .ocx), and fires up the add-on program. The class program creates an instance of the object and gives your script a reference with which it can use and manipulate the object.

I'll show you how to do this in each WSH-compatible language later in this chapter. For almost all cases, this is all you need.

In the remainder of this chapter, I'll tell you how to use objects in VBScript and other languages. The next section on VBScript will follow the tutorial style of Chapter 2, "VBScript Tutorial," whereas the descriptions for other languages will assume more experience with programming.

Finally, at the end of the chapter, I'll tell you how to find useful objects not discussed in the later chapters of this book.



SPECIAL OFFER

Use code BACKTOLEARN during checkout to save 45% on books & eBooks. Shop now.

Home > Articles > Home & Office Computing > Microsoft Windows Desktop
Windows Scripting and Objects

    Oct 4, 2002

📄 Contents
␡

    Scripting and Objects
    Using Objects with VBScript
    Using Objects with JScript
    Using Objects with ActivePerl
    Using Objects with ActivePython
    Using Objects with Object REXX
    Using the WScript Object
    Locating and Using Unusual Objects

    ⎙ Print + Share This 

< Back Page 2 of 8 Next >
This chapter is from the book 
This chapter is from the book
Windows XP Under the Hood: Hardcore Windows Scripting and Command Line PowerWindows XP Under the Hood: Hardcore Windows Scripting and Command Line Power

Learn More Buy
This chapter is from the book
Windows XP Under the Hood: Hardcore Windows Scripting and Command Line PowerWindows XP Under the Hood: Hardcore Windows Scripting and Command Line Power

Learn More Buy
Using Objects with VBScript

To use objects in VBScript, you first need to create an instance of an object and store its reference in a VBScript variable. Then, the methods and properties of the object can be accessed using variable.propertyname or variable.methodname. This is easier to demonstrate than explain, so here's an example (this is a short script that tells whether your C: drive has a folder named \windows):

set fso = CreateObject("Scripting.FileSystemObject")
if fso.FolderExists("c:\windows") then
  WScript.echo "There is a folder named \Windows"
end if

In the first line of the script, we create an instance of a Scripting.FileSystemObject. This is an object class provided with WSH that has handy properties and methods you can use when examining and manipulating disks and files.

Except for the word set, this looks just like a typical call to a function with the returned value being assigned to a variable. That's just what it is. CreateObject is a function that creates a new object instance. What's new is the word set, which VBScript requires you to use to indicate that an object reference is being stored rather than a regular value.

In general, the syntax to create an object instance in VBScript is

set variablename = CreateObject("objectname")

where variablename is the variable you want to use to hold the object reference, and objectname is the type of object you want to create.

In the second line of the example, we use the FolderExists method to find out whether a specified folder exists. Remember that methods and properties are just like regular functions and subroutines; they just happen to "live" in a separate program that provides the object class. The presence of fso. before FolderExists tells VBScript that the FolderExists function is part of the object class to which fso refers, which in this example is Scripting.FileSystemObject.

Some properties and methods take arguments, as you saw with FolderExists. When they do, you have to use parentheses in the same way you would with any other VBScript function or subroutine call. If the method or property returns a function value, you must use parentheses:

variable = object.property("arguments", "in", "parens")

If a method doesn't return a value, you can omit the parentheses:

object.method "arguments", "without", "parens"

Does this look familiar? We used objects all through the VBScript tutorial in Chapter 2, in statements such as this:

WScript.echo "Today's date is", date

Now, you should be able to recognize that WScript is an object variable and that echo is one of its methods. We never needed to use CreateObject to get WScript set up, though, because VBScript provides it automatically. The WScript object has several other handy methods and properties that we'll discuss later in this chapter.

As mentioned earlier, some properties and methods return another object as their value. For example, Scripting.FileSystemObject has a GetFile method that returns a File object. The File object can then be used to examine and manipulate the file. Here's a sample script that gives the size and creation date of the program file \windows\notepad.exe:

set fso = CreateObject("Scripting.FileSystemObject")
set file = fso.GetFile("c:\windows\notepad.exe ")
WScript.echo "Notepad.exe was created on", file.DateCreated
WScript.echo "and is", file.Size, "bytes long"

The first line is the same as in the previous script, and it creates an instance of the helpful Scripting.FileSystemObject.

The second line asks the FileSystemObject to return a File object representing the file c:\windows\notepad.exe. Because I want to use this object several times, I saved it in the variable file, using the set keyword. (Although file is a reserved word in Visual Basic, it's not in VBScript, so it's available for use as a variable name.)

The next two lines use the File object's DateCreated and Size properties. Because these functions don't need arguments, there are no parentheses. The returned date/time and numeric values are printed by the WScript.echo method. On my computer, this prints the following:

Notepad.exe was created on 4/1/2001 7:27:08 AM
and is 50960 bytes long

Automation and Document Files

The GetObject function may be used to obtain an object that represents some already existing document file, through a process called Automation. GetObject uses the name of the document file to find the appropriate object class server, through the Windows standard file type association mechanism (the list of file types and applications you see in Windows Explorer when you click Tools, Folder Options, File Types).

For example, you can create a Word document object representing an existing file and print it:

set obj = GetObject("C:\docs\userlist.doc") ' get object for existing document
obj.Printout                                ' print the document
set obj = Nothing                           ' release the object

GetObject can also obtain a reference to an already existing object that was created by some other program, through a name called a moniker. Several preexisting objects can be used to manage networking, Windows, and Active Directory user accounts. We'll cover these in Chapter 7, "Windows Management Instrumentation (WMI)," and Chapter 8, "Active Directory Scripting Interface (ADSI)."
The Difference Between Properties and Methods

I don't know about you, but for a long time I found the distinction between properties and methods to be confusing. Now, it's not crucially important to understand the difference, but if you're curious, I'll tell you how I finally came to an understanding of sorts.

If you look back in the preceding section, you'll see I mentioned the FolderExists method that is part of the object FileSystemObject. Why is FolderExists a method and not a property? It comes down to these main points:

    Properties relate directly to aspects of the object, or rather, of the thing the object represents.

    Properties act like variables: You just refer to them by their name.

    Every property returns a value of some sort. Retrieving a property's value doesn't change anything about the object or whatever it represents.

    Some properties let you assign new values to them. This changes the attribute of the object and the underlying thing it represents.

    Methods are the things the object's program can do for you.

    Methods act like functions and subroutines: They can have arguments passed to them.

    Methods don't have to return a value, but some do.

    Invoking a method can change something about the object or the real-world thing it represents.

Therefore, FolderExists is a method because it takes an argument (the name of the file it is to look up). Properties don't need arguments because they are intrinsic attributes of the object itself. As such, they don't need any additional information in order to return a value.

There is something else I should mention about properties: In many cases you can both evaluate them (examine their values) and assign new values to them. They work just like variables in this regard. The difference is that when you assign a new value to a property, the object software makes a corresponding change in the actual thing that the object represents. For example, assigning a new value to a File object's Name property changes the actual file's name, as shown here:

WScript.echo file.Name     ' evaluate the property
file.Name = "newname"      ' assign a new value to the property

Keep in mind, however, that some objects don't let you change a property's value. In this case, the object's documentation will call it a read-only property.
Nested Objects

One other thing I want to point out is that you don't necessarily need to save every object reference in a variable. In the previous example that displayed information about Notepad.exe, if I only wanted to see the creation date, I could have skipped the step of storing the File object in variable file and could have used these statements:

set fso = CreateObject("Scripting.FileSystemObject")
WScript.echo "Notepad.exe was created on",_
  fso.GetFile("c:\windows\notepad.exe ").DateCreated

In this case, VBScript refers to fso to call the GetFile method, and the returned object is used to call the DateCreated property. It's not unusual to see several levels of objects this way; this is called a nested object reference.

When you're working with Microsoft Word objects, this is very common. In scripts or Word macros, you may often see statements like these:

ActiveDocument.PageSetup.Orientation = wdOrientLandscape
ActiveDocument.PageSetup.TopMargin = InchesToPoints(0.5)
ActiveDocument.PageSetup.BottomMargin = InchesToPoints(0.5)
ActiveDocument.PageSetup.PageWidth = InchesToPoints(11)

In this example, the ActiveDocument object returns a PageSetup object, which has orientation and margin properties you can set. You could save yourself some extra keystrokes in creating this script by saving a reference to the PageSetup object, as follows:

set ps = ActiveDocument.PageSetup
ps.Orientation = wdOrientLandscape
ps.TopMargin = InchesToPoints(0.5)
ps.BottomMargin = InchesToPoints(0.5)
ps.PageWidth = InchesToPoints(11)

However, VBScript has a special program construction called the With statement that makes this even easier. The previous example could be rewritten this way:

with ActiveDocument.PageSetup
  .Orientation = wdOrientLandscape
  .TopMargin = InchesToPoints(0.5)
  .BottomMargin = InchesToPoints(0.5)
  .PageWidth = InchesToPoints(11)
end with

The With statement lets you specify an object reference that is taken as the "default" object between With and End With. Inside the With statement, you can refer to the default object's methods and properties by preceding them with a period but no variable name. Not only can this save you a lot of typing, but it's easier to read, and it lessens the workload on VBScript, thus speeding up your script.

NOTE

If you need to, you can refer to other objects inside the With statement by using the fully spelled-out object.method.etc syntax.
Releasing Objects

When you create an object, Windows activates the object's class server program to manage the object for you. In the case of Scripting.FileSystemObject, you will usually create one of these objects at the beginning of your script and use it throughout. When your script completes, Windows releases the object you've created. The class server program takes care of freeing up its memory and other housekeeping chores. You really don't have to worry about it at all.

However, if you use a script to create multiple objects, you may find that it's appropriate to explicitly release them when you are through using them. For instance, a script that creates multiple Word documents should tell Word to close each document when you're finished with it, lest you end up with hundreds of documents open at once.

You can explicitly tell an object that you're finished with it by assigning the value Nothing to the variable that holds the object reference. Later in this book, you will see examples of this in some of the sample scripts.
Working with Collections

If you ask Scripting.FileSystemObject for the files or subfolders contained in a folder or drive, it may need to return multiple File or Folder objects. In order to manage this, it actually returns a single collection object that contains all the File or Folder objects inside it. You can then examine the contents of the collection to look at the individual items.

A collection object has a Count property that tells how many items are inside and an Item method that returns a specific item from the collection. This would lead you to expect that you could write a script like this to print the names of the files of the root folder on your hard drive:

set fso = CreateObject("Scripting.FileSystemObject")
set files = fso.GetFolder("c:\").Files
for i = 1 to files.Count
  WScript.echo files.Item(i).Name
next

However, this script doesn't work. With a folder colection, Item doesn't allow you to retrieve items by number. It requires you to specify the name of the particular object you want, and if you don't yet know the names, this isn't much very useful.

So, to scan through collection objects, each scripting language provides a way to scan through collections without knowing what they contain. VBScript, for example, provides a special version of the For loop called For Each.

    Pattern

    To scan through a collection object named collection in VBScript, use the For Each loop as follows:

    for each objectvar in collection
      ...statements using objectvar
    next

The For Each loop runs through the statements once for each object in the collection, and the variable objectvar will be made to refer to each of the individual objects in turn. Using For Each, and using a variable named file to hold the individual file objects, our folder-listing script will now work:

set fso = CreateObject("Scripting.FileSystemObject")
set files = fso.GetFolder("c:\").Files
for each file in files
  WScript.echo file.Name
next

You could even use the following:

set fso = CreateObject("Scripting.FileSystemObject")
for each file in fso.GetFolder("c:\").Files
  WScript.echo file.Name
next

Now, if you don't plan on writing scripts in any other languages, skip ahead to the section titled "Using 
  the WScript Object" of this chapter for more information about the built-in WScript object.



SPECIAL OFFER

Use code BACKTOLEARN during checkout to save 45% on books & eBooks. Shop now.

Home > Articles > Home & Office Computing > Microsoft Windows Desktop
Windows Scripting and Objects

    Oct 4, 2002

📄 Contents
␡

    Scripting and Objects
    Using Objects with VBScript
    Using Objects with JScript
    Using Objects with ActivePerl
    Using Objects with ActivePython
    Using Objects with Object REXX
    Using the WScript Object
    Locating and Using Unusual Objects

    ⎙ Print + Share This 

< Back Page 3 of 8 Next >
This chapter is from the book 
This chapter is from the book
Windows XP Under the Hood: Hardcore Windows Scripting and Command Line PowerWindows XP Under the Hood: Hardcore Windows Scripting and Command Line Power

Learn More Buy
This chapter is from the book
Windows XP Under the Hood: Hardcore Windows Scripting and Command Line PowerWindows XP Under the Hood: Hardcore Windows Scripting and Command Line Power

Learn More Buy
Using Objects with JScript

JScript, like VBScript, is a strongly object-oriented language—it's expected that programmers will use objects to extend its power. JScript supplies 11 built-in object types, and programmers can create generic and structured object types in scripts. I won't discuss the intrinsic object types here because this book focuses on external scripting and Windows management objects.

External COM/ActiveX objects are created using the new statement, as follows:

variablename = new ActiveXObject("objectname");

Here, variablename is the declared variable that is to receive the new object reference.

Once you have an object variable in hand, its methods and properties are accessed using variable.propertyname or variable.methodname. For example, this is a short script that tells whether your C: drive has a folder named \windows:

var fso;
fso = new ActiveXObject("Scripting.FileSystemObject");
if fso.FolderExists("c:\\windows")
  WScript.echo("There is a folder named \\Windows");

Parentheses must be used on all method calls, even if the return value is not used. Whereas VBScript tolerates a statement such as

WScript.echo "There is a folder named \Windows"

JScript does not.
Case Sensitivity

In the Windows Script Host environment, JScript programs have access to a predefined object named WScript, which provides several useful methods and properties pertaining to the script's environment, execution, and debugging. Because JScript is a case-sensitive language, to use this object you must type WScript exactly as written here.

However, the method and property names of ActiveX and COM objects are not case sensitive. For example, JScript permits you to type WScript.echo or WScript.Echo.
Working with Collections

If you are used to using JScript with Internet Explorer in browser or server-side ASP scripts, you may be familiar with objects that return collections of objects. Many IE objects let you scan through the object collection using JScript's for...in statement.

However, most other objects' collections do not work with for...in and you must use an Enumerator object to work with them. This is true of most objects you'll encounter in the Windows Script Host environment. JScript's Enumerator object gives you a way of accessing a collection by stepping forward or backward through the collection's list of objects.

To use a collection provided by a scripting or other ActiveX object, you must first convert it to an enumerator:

enumObject = new Enumerator(collectionObject);

The Enumerator object has no properties (in particular, no Length property). It has an internal concept of its "position" in the collection and has methods that let you move the current position forward or back to the beginning. Its four methods are listed in Reference List 3.1.

    Reference List 3.1 Methods of the JScript Enumerator Object.

    Item

    Returns the current item from the collection. The return value will be an object of whatever type the collection holds. If the collection is empty or the current position is undefined, it returns undefined.

    AtEnd

    Returns a Boolean value: True if the current item is the last in the collection, if the current position is undefined, or if the collection is empty. Otherwise, False is returned.

    moveFirst

    Makes the first item in the collection the current item. If the collection is empty, atEnd will immediately be True.

    moveNext

    Makes the next item in the collection the current item. If the collection is empty or the current item is already the last in the collection, the current item will be undefined.

Although a newly created enumerator should be positioned on the first item automatically, it's better style to use moveFirst before examining atEnd or item.

    Pattern

    To scan through a collection object named obj, use an enumerator in this way:

    e = new Enumerator(obj);
    for (e.moveFirst(); ! e.atEnd(); e.moveNext()) {
      x = e.item();
      ...statements using x
    }

Here's an example. This script lists the names of all the files in the root folder on the C: drive:

var fso, e, file;

fso = new ActiveXObject("Scripting.FileSystemObject");

e = new Enumerator(fso.GetFolder("c:\\").files);
for (e.moveFirst(); ! e.atEnd(); e.moveNext()) {
  file = e.item();
  WScript.echo(file.name);
}

Now, if you plan on writing scripts only in JScript, you can skip ahead to the section titled "Using the WScript 
  Object" for more information about the built-in WScript object.


